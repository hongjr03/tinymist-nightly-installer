name: Test Installer Script

on:
  push:
    branches: [ main ]
    paths:
      - 'run.sh'
      - 'run.ps1'
      - '.github/workflows/test-installer.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'run.sh'
      - 'run.ps1'
  workflow_dispatch:  # Allow manual trigger

jobs:
  test-bash-script:
    name: Test Bash Script (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        command: [
          "help",
          "stable-extension",
          "stable-binary",
          "nightly-extension",
          "nightly-binary",
          "run-extension",
          "run-binary",
          "pr-extension",
          "pr-binary"
        ]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            sudo apt-get update
            sudo apt-get install -y jq curl unzip
          elif [ "${{ matrix.os }}" == "macos-latest" ]; then
            brew install jq curl
          fi
      
      - name: Install VSCode CLI
        run: |
          if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            curl -L "https://code.visualstudio.com/sha/download?build=stable&os=cli-alpine-x64" -o vscode_cli.tar.gz
            tar -xf vscode_cli.tar.gz
            sudo mv code /usr/local/bin/
          elif [ "${{ matrix.os }}" == "macos-latest" ]; then
            curl -L "https://code.visualstudio.com/sha/download?build=stable&os=darwin-universal" -o vscode_cli.zip
            unzip vscode_cli.zip
            sudo mv code /usr/local/bin/
          fi
          code --version
      
      - name: Make script executable
        run: chmod +x run.sh

      - name: Test help command
        if: matrix.command == 'help'
        run: |
          echo "Testing help command..."
          ./run.sh --help
          if [ $? -ne 0 ]; then
            echo "Help command failed"
            exit 1
          fi
      
      - name: Test stable extension installation
        if: matrix.command == 'stable-extension'
        run: |
          echo "Testing stable extension installation..."
          ./run.sh extension --stable || echo "Exit code: $?"
      
      - name: Test stable binary installation
        if: matrix.command == 'stable-binary'
        run: |
          echo "Testing stable binary installation..."
          ./run.sh binary --stable || echo "Exit code: $?"
      
      - name: Test nightly extension installation
        if: matrix.command == 'nightly-extension'
        run: |
          echo "Testing nightly extension installation..."
          ./run.sh extension --nightly || echo "Exit code: $?"
      
      - name: Test nightly binary installation
        if: matrix.command == 'nightly-binary'
        run: |
          echo "Testing nightly binary installation..."
          ./run.sh binary --nightly || echo "Exit code: $?"
      
      - name: Test run ID extension installation
        if: matrix.command == 'run-extension'
        run: |
          echo "Testing run ID extension installation..."
          # Get the latest run ID
          RUN_ID=$(curl -s "https://api.github.com/repos/myriad-dreamin/tinymist/actions/workflows/release-vscode.yml/runs?per_page=1&branch=main&event=push&status=success" | jq -r '.workflow_runs[0].id')
          echo "Using run ID: $RUN_ID"
          ./run.sh extension --run $RUN_ID || echo "Exit code: $?"
      
      - name: Test run ID binary installation
        if: matrix.command == 'run-binary'
        run: |
          echo "Testing run ID binary installation..."
          # Get the latest run ID
          RUN_ID=$(curl -s "https://api.github.com/repos/myriad-dreamin/tinymist/actions/workflows/release-vscode.yml/runs?per_page=1&branch=main&event=push&status=success" | jq -r '.workflow_runs[0].id')
          echo "Using run ID: $RUN_ID"
          ./run.sh binary --run $RUN_ID || echo "Exit code: $?"
      
      - name: Test PR extension installation
        if: matrix.command == 'pr-extension'
        run: |
          echo "Testing PR extension installation..."
          # Get the latest PR number
          PR_NUMBER=$(curl -s "https://api.github.com/repos/myriad-dreamin/tinymist/pulls?per_page=1&state=open" | jq -r '.[0].number')
          if [ -z "$PR_NUMBER" ] || [ "$PR_NUMBER" == "null" ]; then
            echo "No open PRs found, using a recent PR number"
            PR_NUMBER="1500" # Use a PR number that likely exists
          fi
          echo "Using PR number: $PR_NUMBER"
          ./run.sh extension --pr $PR_NUMBER || echo "Exit code: $?"
      
      - name: Test PR binary installation
        if: matrix.command == 'pr-binary'
        run: |
          echo "Testing PR binary installation..."
          # Get the latest PR number
          PR_NUMBER=$(curl -s "https://api.github.com/repos/myriad-dreamin/tinymist/pulls?per_page=1&state=open" | jq -r '.[0].number')
          if [ -z "$PR_NUMBER" ] || [ "$PR_NUMBER" == "null" ]; then
            echo "No open PRs found, using a recent PR number"
            PR_NUMBER="1500" # Use a PR number that likely exists
          fi
          echo "Using PR number: $PR_NUMBER"
          ./run.sh binary --pr $PR_NUMBER || echo "Exit code: $?"

  test-powershell-script:
    name: Test PowerShell Script
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        command: [
          "help",
          "stable-extension",
          "stable-binary",
          "nightly-extension",
          "nightly-binary",
          "run-extension",
          "run-binary",
          "pr-extension",
          "pr-binary"
        ]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          Invoke-WebRequest -Uri "https://github.com/stedolan/jq/releases/download/jq-1.6/jq-win64.exe" -OutFile "C:\Windows\System32\jq.exe"
          New-Item -ItemType Directory -Path "$env:USERPROFILE\.local\bin" -Force | Out-Null
      
      - name: Install VSCode CLI
        run: |
          Invoke-WebRequest -Uri "https://code.visualstudio.com/sha/download?build=stable&os=win32-x64-archive" -OutFile "vscode_cli.zip"
          Expand-Archive -Path "vscode_cli.zip" -DestinationPath "C:\vscode-cli" -Force
          Copy-Item -Path "C:\vscode-cli\bin\code.cmd" -Destination "C:\Windows\System32\code.cmd" -Force
          code --version

      - name: Test help command
        if: matrix.command == 'help'
        run: |
          Write-Host "Testing help command..."
          & ".\run.ps1" --help
          if ($LASTEXITCODE -ne 0) {
            Write-Host "Help command failed"
            exit 1
          }
      
      - name: Test stable extension installation
        if: matrix.command == 'stable-extension'
        run: |
          Write-Host "Testing stable extension installation..."
          try {
            & ".\run.ps1" extension --stable
          } 
          catch {
            Write-Host "Exit code: $LASTEXITCODE"
            Write-Host $_.Exception.Message
          }
      
      - name: Test stable binary installation
        if: matrix.command == 'stable-binary'
        run: |
          Write-Host "Testing stable binary installation..."
          try {
            & ".\run.ps1" binary --stable
          } 
          catch {
            Write-Host "Exit code: $LASTEXITCODE"
            Write-Host $_.Exception.Message
          }
      
      - name: Test nightly extension installation
        if: matrix.command == 'nightly-extension'
        run: |
          Write-Host "Testing nightly extension installation..."
          try {
            & ".\run.ps1" extension --nightly
          } 
          catch {
            Write-Host "Exit code: $LASTEXITCODE"
            Write-Host $_.Exception.Message
          }
      
      - name: Test nightly binary installation
        if: matrix.command == 'nightly-binary'
        run: |
          Write-Host "Testing nightly binary installation..."
          try {
            & ".\run.ps1" binary --nightly
          } 
          catch {
            Write-Host "Exit code: $LASTEXITCODE"
            Write-Host $_.Exception.Message
          }
      
      - name: Test run ID extension installation
        if: matrix.command == 'run-extension'
        run: |
          Write-Host "Testing run ID extension installation..."
          # Get the latest run ID
          $RUN_ID = (Invoke-RestMethod -Uri "https://api.github.com/repos/myriad-dreamin/tinymist/actions/workflows/release-vscode.yml/runs?per_page=1&branch=main&event=push&status=success").workflow_runs[0].id
          Write-Host "Using run ID: $RUN_ID"
          try {
            & ".\run.ps1" extension --run $RUN_ID
          } 
          catch {
            Write-Host "Exit code: $LASTEXITCODE"
            Write-Host $_.Exception.Message
          }
      
      - name: Test run ID binary installation
        if: matrix.command == 'run-binary'
        run: |
          Write-Host "Testing run ID binary installation..."
          # Get the latest run ID
          $RUN_ID = (Invoke-RestMethod -Uri "https://api.github.com/repos/myriad-dreamin/tinymist/actions/workflows/release-vscode.yml/runs?per_page=1&branch=main&event=push&status=success").workflow_runs[0].id
          Write-Host "Using run ID: $RUN_ID"
          try {
            & ".\run.ps1" binary --run $RUN_ID
          } 
          catch {
            Write-Host "Exit code: $LASTEXITCODE"
            Write-Host $_.Exception.Message
          }
      
      - name: Test PR extension installation
        if: matrix.command == 'pr-extension'
        run: |
          Write-Host "Testing PR extension installation..."
          # Get the latest PR number
          try {
            $PR_NUMBER = (Invoke-RestMethod -Uri "https://api.github.com/repos/myriad-dreamin/tinymist/pulls?per_page=1&state=open")[0].number
          }
          catch {
            $PR_NUMBER = $null
          }
          if (-not $PR_NUMBER) {
            Write-Host "No open PRs found, using a recent PR number"
            $PR_NUMBER = "1500" # Use a PR number that likely exists
          }
          Write-Host "Using PR number: $PR_NUMBER"
          try {
            & ".\run.ps1" extension --pr $PR_NUMBER
          } 
          catch {
            Write-Host "Exit code: $LASTEXITCODE"
            Write-Host $_.Exception.Message
          }
      
      - name: Test PR binary installation
        if: matrix.command == 'pr-binary'
        run: |
          Write-Host "Testing PR binary installation..."
          # Get the latest PR number
          try {
            $PR_NUMBER = (Invoke-RestMethod -Uri "https://api.github.com/repos/myriad-dreamin/tinymist/pulls?per_page=1&state=open")[0].number
          }
          catch {
            $PR_NUMBER = $null
          }
          if (-not $PR_NUMBER) {
            Write-Host "No open PRs found, using a recent PR number"
            $PR_NUMBER = "1500" # Use a PR number that likely exists
          }
          Write-Host "Using PR number: $PR_NUMBER"
          try {
            & ".\run.ps1" binary --pr $PR_NUMBER
          } 
          catch {
            Write-Host "Exit code: $LASTEXITCODE"
            Write-Host $_.Exception.Message
          } 